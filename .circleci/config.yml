# This code is licensed from CircleCI to the user under the MIT license.
# See here for details: https://circleci.com/developer/orbs/licensing
version: 2.1
description: |
    Manage your GitHub projects in your CI pipeline with the GitHub CLI orb integration.
display:
    home_url: https://cli.github.com/manual/
    source_url: https://github.com/CircleCI-Public/github-cli-orb
commands:
    clone:
        description: |
            A GitHub specific alternative to CircleCI's native "checkout" command.
            Use the GitHub CLI to clone the current repository, or specify an alternative repo via parameters.
            https://cli.github.com/manual/gh_repo_clone
        parameters:
            dir:
                default: .
                description: Select the path to clone into. By default the current path will be selected, which is dictated by the job's "working_directory".
                type: string
            repo:
                default: $CIRCLE_REPOSITORY_URL
                description: Enter either the name of the repository or the full repository URL. Will default to the current project.
                type: string
        steps:
            - run:
                command: |-
                    # Ensure known hosts are entered. Required for Docker.
                    mkdir -p ~/.ssh
                    echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
                    PARAM_GITHUB_REPO_EXPANDED="$(eval echo "$PARAM_GH_REPO")"
                    gh repo clone "$PARAM_GITHUB_REPO_EXPANDED" "$PARAM_GH_DIR"
                environment:
                    PARAM_GH_DIR: <<parameters.dir>>
                    PARAM_GH_REPO: <<parameters.repo>>
                name: Cloning repository
    install:
        description: Install the gh cli without authenticating or configuring. This command should be run before invoking the gh cli.
        parameters:
            version:
                default: 2.3.0
                description: Specify the full semver versioned tag to use.
                type: string
        steps:
            - run:
                command: |
                    #!/bin/bash
                    # set smart sudo
                    if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

                    # Define current platform
                    if [[ "$(uname -s)" == "Darwin" && "$(uname -m)" == "x86_64" ]]; then
                    	export SYS_ENV_PLATFORM=macos
                    elif [[ "$(uname -s)" == "Linux" && "$(uname -m)" == "x86_64" ]]; then
                    	export SYS_ENV_PLATFORM=linux_x86
                    elif [[ "$(uname -s)" == "Linux" && "$(uname -m)" == "aarch64" ]]; then
                    	export SYS_ENV_PLATFORM=linux_arm
                    else
                    	echo "This platform appears to be unsupported."
                    	uname -a
                    	exit 1
                    fi

                    # If not installed
                    if ! command -v gh >/dev/null 2>&1; then
                    	echo "Installing the GitHub CLI"
                    	case $SYS_ENV_PLATFORM in
                    		linux_x86)
                    			curl -sSL "https://github.com/cli/cli/releases/download/v${PARAM_GH_CLI_VERSION}/gh_${PARAM_GH_CLI_VERSION}_linux_amd64.deb" -o "gh-cli.deb"
                    			$SUDO apt install ./gh-cli.deb
                    			rm gh-cli.deb
                    			;;
                    		macos)
                    			curl -sSL "https://github.com/cli/cli/releases/download/v${PARAM_GH_CLI_VERSION}/gh_${PARAM_GH_CLI_VERSION}_macOS_amd64.tar.gz" -o "gh-cli.tar.gz"
                    			$SUDO tar -xf ./gh-cli.tar.gz -C /usr/local/ --strip-components=1
                    			rm gh-cli.tar.gz
                    			;;
                    		linux_arm)
                    			curl -sSL "https://github.com/cli/cli/releases/download/v${PARAM_GH_CLI_VERSION}/gh_${PARAM_GH_CLI_VERSION}_linux_arm64.tar.gz" -o "gh-cli.tar.gz"
                    			$SUDO tar -xf ./gh-cli.tar.gz -C /usr/local/ --strip-components=1
                    			rm gh-cli.tar.gz
                    			;;
                    		*)
                    		echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
                    		echo "https://github.com/CircleCI-Public/github-cli-orb"
                    		exit 1
                    	;;
                    	esac
                    	# Validate install.
                    	echo
                    	echo "GH CLI installed"
                    	command -v gh
                    else
                    	echo "GH CLI is already installed."
                    fi
                environment:
                    PARAM_GH_CLI_VERSION: <<parameters.version>>
                name: Install GH CLI v<<parameters.version>>
    setup:
        description: Install and authenticate with the gh cli. This command should be run before invoking the gh cli.
        parameters:
            hostname:
                default: github.com
                description: Specify the hostname of the GitHub instance to authenticate with.
                type: string
            token:
                default: GITHUB_TOKEN
                description: |
                    Enter the name of the environment variable containing the GitHub Personal Access token to be used for authentication.
                    It is recommended for CI processes that you create a "machine" user on GitHub.com with the needed permissions, rather than using your own.
                type: env_var_name
            version:
                default: 2.3.0
                description: Specify the full semver versioned tag to use.
                type: string
        steps:
            - install:
                version: <<parameters.version>>
            - run:
                command: |
                    #!/bin/bash
                    # Get auth token
                    export GITHUB_TOKEN=${!PARAM_GH_TOKEN}
                    [ -z "$GITHUB_TOKEN" ] && echo "A GitHub token must be supplied. Check the \"token\" parameter." && exit 1
                    echo "export GITHUB_TOKEN=\"${GITHUB_TOKEN}\"" >> "$BASH_ENV"

                    # Authenticate
                    echo
                    echo "Authenticating GH CLI"
                    gh auth setup-git --hostname "$PARAM_GH_HOSTNAME"
                    gh auth status

                    # Configure
                    echo
                    echo "Disabling interactive prompts for GH CLI"
                    gh config set prompt disabled
                environment:
                    PARAM_GH_HOSTNAME: <<parameters.hostname>>
                    PARAM_GH_TOKEN: <<parameters.token>>
                name: Configure GH CLI v<<parameters.version>>
jobs:
    release:
        description: |
            Create a new GitHub Release for a repository. Specify a tag with the `tag` parameter (required). If a matching git tag does not yet exist, one will automatically get created from the latest state of the default branch.
        docker:
            - image: cimg/base:stable
        parameters:
            draft:
                default: false
                description: Save the release as a draft instead of publishing it.
                type: boolean
            files:
                default: ""
                description: 'To include a subset of your repository''s files in the release, enter the file glob here. (e.g. ./dist/*.tgz) '
                type: string
            hostname:
                default: github.com
                description: Specify the hostname of the GitHub instance to authenticate with. Set this to connect to your GitHub Enterprise instance.
                type: string
            notes-file:
                default: ""
                description: 'Path to file containing release notes (e.g.: ./changelog.md). '
                type: string
            prerelease:
                default: false
                description: Mark the release as a prerelease.
                type: boolean
            tag:
                description: Select a tag to create a release from. If a matching git tag does not yet exist, one will automatically get created from the latest state of the default branch.
                type: string
            title:
                default: ""
                description: 'Include a release title. '
                type: string
            token:
                default: GITHUB_TOKEN
                description: |
                    Enter the name of the environment variable containing the GitHub Personal Access token to be used for authentication.
                    It is recommended for CI processes that you create a "machine" user on GitHub.com with the needed permissions, rather than using your own.
                type: env_var_name
            version:
                default: 2.3.0
                description: Specify the full semver versioned tag to use for the GitHub CLI installation.
                type: string
        resource_class: small
        steps:
            - install:
                version: <<parameters.version>>
            - clone
            - run:
                command: |
                    #!/bin/bash
                    # Get auth token
                    export GITHUB_TOKEN=${!PARAM_GH_TOKEN}
                    [ -z "$GITHUB_TOKEN" ] && echo "A GitHub token must be supplied. Check the \"token\" parameter." && exit 1
                    echo "export GITHUB_TOKEN=\"${GITHUB_TOKEN}\"" >> "$BASH_ENV"

                    # Get hostname if set
                    if [ "$PARAM_GH_HOSTNAME" == 1 ]; then
                    	export GITHUB_HOSTNAME=${!PARAM_GH_HOSTNAME}
                    	echo "export GITHUB_HOSTNAME=\"${PARAM_GH_HOSTNAME}\"" >> "$BASH_ENV"
                    fi

                    if [ "$PARAM_GH_DRAFT" == 1 ]; then
                    	set -- "$@" --draft
                    fi
                    if [ "$PARAM_GH_PRERELEASE" == 1 ]; then
                    	set -- "$@" --prerelease
                    fi
                    if [ -n "$PARAM_GH_NOTES" ]; then
                    	set -- "$@" --notes-file "$PARAM_GH_NOTES"
                    fi
                    if [ -n "$PARAM_GH_TITLE" ]; then
                    	set -- "$@" --title "$PARAM_GH_TITLE"
                    fi
                    if [ -n "$PARAM_GH_FILES" ]; then
                    	set -- "$@" " $PARAM_GH_FILES"
                    fi
                    set -- "$@" --repo "$(git config --get remote.origin.url)"

                    gh release create "$PARAM_GH_TAG" "$@"
                environment:
                    PARAM_GH_DRAFT: <<parameters.draft>>
                    PARAM_GH_FILES: <<parameters.files>>
                    PARAM_GH_HOSTNAME: <<parameters.hostname>>
                    PARAM_GH_NOTES: <<parameters.notes-file>>
                    PARAM_GH_PRERELEASE: <<parameters.prerelease>>
                    PARAM_GH_TAG: <<parameters.tag>>
                    PARAM_GH_TITLE: <<parameters.title>>
                    PARAM_GH_TOKEN: <<parameters.token>>
                name: Creating a <<#parameters.draft>><<parameters.draft>> <</parameters.draft>>GitHub Release
examples:
    create_release:
        description: |
            Use the GitHub CLI to issue a new release as a part of your CircleCI pipeline. In this example, on every commit (merge) to the "main" branch, we will use the config to specify the desired tag and issue a release. Add a Context containing your GITHUB_TOKEN and GITHUB_HOSTNAME (optional) or set a project-level environment variable.
        usage:
            version: "2.1"
            orbs:
                gh: circleci/github-cli@2.0
                node: circleci/node@4.3
            workflows:
                test-and-deploy:
                    jobs:
                        - node/test
                        - gh/release:
                            context:
                                - GITHUB_CREDS
                            filters:
                                branches:
                                    only:
                                        - main
                            notes-file: changelog.md
                            requires:
                                - node/test
                            tag: 1.0.0
                            title: The initial release
    install:
        description: |
            Simply install the GitHub CLI for manual usage. The `install` command is used to install the GitHub CLI without authenticating or configuring it. Once the installation is complete, you can utilize the CLI manually, or use any of the other provided orb commands, such as `clone`.
        usage:
            version: "2.1"
            orbs:
                gh: circleci/github-cli@2.0
            jobs:
                create-a-deployment:
                    docker:
                        - image: cimg/base:stable
                    steps:
                        - gh/install
                        - run:
                            command: |
                                gh api /repos/:owner/:repo/deployments --preview ant-man --input - \
                                --jq '"export GH_DEPLOYMENT_STATUS_URL=\(.statuses_url)"' >> $BASH_ENV \<<JSON || true
                                {
                                "ref": "${CIRCLE_TAG:-$CIRCLE_SHA1}",
                                "environment": "${AWS_ENVIRONMENT,,}",
                                "auto_merge": false,
                                "required_contexts": []
                                }
                                JSON
                            name: Create Deployment
            workflows:
                use-my-orb:
                    jobs:
                        - create-a-deployment
    setup:
        description: |
            Simply install the GitHub CLI for manual usage. The `setup` command is used to install and authenticate the GitHub CLI. Once the setup is complete, you can utilize the CLI manually, or use any of the other provided orb commands, such as `clone`.
        usage:
            version: "2.1"
            orbs:
                gh: circleci/github-cli@2.0
            jobs:
                create-a-pr:
                    docker:
                        - image: cimg/base:stable
                    steps:
                        - gh/setup
                        - run:
                            command: |
                                gh pr create --title "Bugfix from $CIRCLE_BRANCH"
                            name: Create Pull Request
                        - gh/clone
            workflows:
                use-my-orb:
                    jobs:
                        - create-a-pr

